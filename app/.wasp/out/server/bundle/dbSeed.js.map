{"version":3,"file":"dbSeed.js","sources":["../../../../src/shared/constants.ts","../../../../src/server/scripts/usersSeed.ts","../src/dbSeed.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport enum TierIds {\n  HOBBY = 'hobby-tier',\n  PRO = 'pro-tier',\n  ENTERPRISE = 'enterprise-tier',\n}\n\nexport const DOCS_URL = 'https://docs.opensaas.sh';\nexport const BLOG_URL = 'https://docs.opensaas.sh/blog';\n\nconst isDevEnv = process.env.NODE_ENV !== 'production';\nconst customerPortalTestUrl = '<your-url-here>'; // TODO: find your test url at https://dashboard.stripe.com/test/settings/billing/portal\nconst customerPortalProdUrl = '<your-url-here>'; // TODO: add before deploying to production\n\nexport const STRIPE_CUSTOMER_PORTAL_LINK = isDevEnv ? customerPortalTestUrl : customerPortalProdUrl;\n\ncheckStripePortalLinksExist({ customerPortalTestUrl, customerPortalProdUrl });\n\ntype StripePortalUrls = {\n  customerPortalTestUrl: string | undefined;\n  customerPortalProdUrl: string | undefined;\n};\n\nfunction checkStripePortalLinksExist(links: StripePortalUrls) {\n  const schema = z.string().url();\n  const testResult = schema.safeParse(links.customerPortalTestUrl);\n  const prodResult = schema.safeParse(links.customerPortalProdUrl);\n  let consoleMsg = {\n    color: '\\x1b[33m%s\\x1b[0m',\n    msg: '',\n  };\n\n  if (testResult.success && prodResult.success) {\n    consoleMsg.color = '\\x1b[32m%s\\x1b[0m';\n    consoleMsg.msg = '✅ Both STRIPE_CUSTOMER_PORTAL_LINK links defined';\n  } else if (!testResult.success && !prodResult.success) {\n    consoleMsg.msg = '⛔️ STRIPE_CUSTOMER_PORTAL_LINK is not defined';\n  } else if (!testResult.success) {\n    consoleMsg.msg = '⛔️ STRIPE_CUSTOMER_PORTAL_LINK is not defined for test env';\n  } else {\n    consoleMsg.msg = '⛔️ STRIPE_CUSTOMER_PORTAL_LINK is not defined for prod env';\n  }\n  console.log(consoleMsg.color, consoleMsg.msg);\n}\n","import { type User } from 'wasp/entities';\nimport { faker } from '@faker-js/faker';\nimport type { PrismaClient } from '@prisma/client';\nimport { TierIds } from '../../shared/constants.js';\n\n// in a terminal window run `wasp db seed` to seed your dev database with mock user data\nexport function createRandomUser() {\n  const firstName = faker.person.firstName();\n  const lastName = faker.person.lastName();\n  const user: Omit<User, 'id'> = {\n    email: faker.internet.email({\n      firstName,\n      lastName,\n    }),\n    username: faker.internet.userName({\n      firstName,\n      lastName,\n    }),\n    createdAt: faker.date.between({ from: new Date('2023-01-01'), to: new Date() }),\n    lastActiveTimestamp: faker.date.recent(),\n    isAdmin: false,\n    stripeId: `cus_${faker.string.uuid()}`,\n    hasPaid: faker.helpers.arrayElement([true, false]),\n    sendEmail: false,\n    subscriptionStatus: faker.helpers.arrayElement(['active', 'canceled', 'past_due', 'deleted']),\n    datePaid: faker.date.recent(),\n    credits: faker.number.int({ min: 0, max: 3 }),\n    checkoutSessionId: null,\n    subscriptionTier: faker.helpers.arrayElement([TierIds.HOBBY, TierIds.PRO]),\n  };\n  return user;\n}\n\nconst USERS: Omit<User, 'id'>[] = faker.helpers.multiple(createRandomUser, {\n  count: 50,\n});\n\nexport async function devSeedUsers(prismaClient: PrismaClient) {\n  try {\n    await Promise.all(\n      USERS.map(async (user) => {\n        await prismaClient.user.create({\n          data: user,\n        });\n      })\n    );\n  } catch (error) {\n    console.error(error);\n  }\n}\n","\n// This is a script that is used to seed the database. It is present here in the server project in\n// order to have easy access to the server logic, like operations and the rest, since we often want\n// to use that logic in our seeding.\n// TODO: Consider in the future moving it into a a separate project (maybe db/ ?), while still\n//   maintaining access to logic from the server/ .\n\nimport { prisma, DbSeedFn } from 'wasp/server'\n\nimport { devSeedUsers } from '../../../../src/server/scripts/usersSeed.js'\n\nconst seeds = {\n  devSeedUsers,\n}\n\nasync function main() {\n  const nameOfSeedToRun = process.env.WASP_DB_SEED_NAME\n  if (nameOfSeedToRun) {\n    console.log(`Running seed: ${nameOfSeedToRun}`)\n  } else {\n    console.error('Name of the seed to run not specified!')\n  }\n  await (seeds[nameOfSeedToRun] satisfies DbSeedFn)(prisma)\n}\n\nmain()\n  .then(async () => { await prisma.$disconnect() })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n"],"names":["TierIds"],"mappings":"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"}