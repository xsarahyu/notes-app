{"version":3,"file":"server.js","sources":["../src/middleware/operations.ts","../../../../src/server/payments/stripeUtils.ts","../../../../src/shared/constants.ts","../../../../src/server/file-upload/s3Utils.ts","../../../../src/server/actions.ts","../src/actions/generateGptResponse.ts","../src/routes/operations/generateGptResponse.js","../src/actions/createTask.ts","../src/routes/operations/createTask.js","../src/actions/deleteTask.ts","../src/routes/operations/deleteTask.js","../src/actions/updateTask.ts","../src/routes/operations/updateTask.js","../src/actions/stripePayment.ts","../src/routes/operations/stripePayment.js","../src/actions/updateCurrentUser.ts","../src/routes/operations/updateCurrentUser.js","../src/actions/updateUserById.ts","../src/routes/operations/updateUserById.js","../src/actions/createFile.ts","../src/routes/operations/createFile.js","../../../../src/server/queries.ts","../src/queries/getGptResponses.ts","../src/routes/operations/getGptResponses.js","../src/queries/getAllTasksByUser.ts","../src/routes/operations/getAllTasksByUser.js","../src/queries/getAllFilesByUser.ts","../src/routes/operations/getAllFilesByUser.js","../src/queries/getDownloadFileSignedURL.ts","../src/routes/operations/getDownloadFileSignedURL.js","../src/queries/getDailyStats.ts","../src/routes/operations/getDailyStats.js","../src/queries/getPaginatedUsers.ts","../src/routes/operations/getPaginatedUsers.js","../src/routes/operations/index.js","../src/middleware/globalMiddleware.ts","../src/routes/auth/me.js","../src/routes/auth/logout.ts","../src/auth/providers/username/login.ts","../src/auth/providers/username/signup.ts","../../../../src/server/auth/setUsername.ts","../src/auth/providers/config/username.ts","../src/auth/providers/index.ts","../src/routes/auth/index.js","../../../../src/server/webhooks/stripe.ts","../src/routes/apis/index.ts","../src/routes/index.js","../src/app.js","../../../../src/server/workers/checkAndQueueEmails.ts","../src/jobs/emailChecker.ts","../../../../src/server/workers/plausibleAnalyticsUtils.ts","../../../../src/server/workers/calculateDailyStats.ts","../src/jobs/dailyStatsJob.ts","../src/polyfill.ts","../src/server.ts"],"sourcesContent":["import { \n    deserialize as superjsonDeserialize,\n    serialize as superjsonSerialize,\n} from 'superjson'\nimport { handleRejection } from 'wasp/server/utils'\n\nexport function createOperation (handlerFn) {\n    return handleRejection(async (req, res) => {\n        const args = (req.body && superjsonDeserialize(req.body)) || {}\n        const context = {\n            user: req.user\n        }  \n        const result = await handlerFn(args, context)\n        const serializedResult = superjsonSerialize(result)\n        res.json(serializedResult)\n    })\n}\n\nexport function createQuery(handlerFn) {\n    return createOperation(handlerFn)\n}\n\nexport function createAction(handlerFn) {\n    return createOperation(handlerFn)\n}\n","import Stripe from 'stripe';\n\nconst stripe = new Stripe(process.env.STRIPE_KEY!, {\n  apiVersion: '2022-11-15',\n});\n\n// WASP_WEB_CLIENT_URL will be set up by Wasp when deploying to production: https://wasp-lang.dev/docs/deploying\nconst DOMAIN = process.env.WASP_WEB_CLIENT_URL || 'http://localhost:3000';\n\nexport async function fetchStripeCustomer(customerEmail: string) {\n  let customer: Stripe.Customer;\n  const stripeCustomers = await stripe.customers.list({\n    email: customerEmail,\n  });\n  if (!stripeCustomers.data.length) {\n    console.log('creating customer');\n    customer = await stripe.customers.create({\n      email: customerEmail,\n    });\n  } else {\n    console.log('using existing customer');\n    customer = stripeCustomers.data[0];\n  }\n  return customer;\n}\n\nexport async function createStripeCheckoutSession({ priceId, customerId }: { priceId: string; customerId: string }) {\n  return await stripe.checkout.sessions.create({\n    line_items: [\n      {\n        price: priceId,\n        quantity: 1,\n      },\n    ],\n    mode: 'subscription',\n    success_url: `${DOMAIN}/checkout?success=true`,\n    cancel_url: `${DOMAIN}/checkout?canceled=true`,\n    automatic_tax: { enabled: true },\n    customer_update: {\n      address: 'auto',\n    },\n    customer: customerId,\n  });\n}\n","import { z } from 'zod';\n\nexport enum TierIds {\n  HOBBY = 'hobby-tier',\n  PRO = 'pro-tier',\n  ENTERPRISE = 'enterprise-tier',\n}\n\nexport const DOCS_URL = 'https://docs.opensaas.sh';\nexport const BLOG_URL = 'https://docs.opensaas.sh/blog';\n\nconst isDevEnv = process.env.NODE_ENV !== 'production';\nconst customerPortalTestUrl = '<your-url-here>'; // TODO: find your test url at https://dashboard.stripe.com/test/settings/billing/portal\nconst customerPortalProdUrl = '<your-url-here>'; // TODO: add before deploying to production\n\nexport const STRIPE_CUSTOMER_PORTAL_LINK = isDevEnv ? customerPortalTestUrl : customerPortalProdUrl;\n\ncheckStripePortalLinksExist({ customerPortalTestUrl, customerPortalProdUrl });\n\ntype StripePortalUrls = {\n  customerPortalTestUrl: string | undefined;\n  customerPortalProdUrl: string | undefined;\n};\n\nfunction checkStripePortalLinksExist(links: StripePortalUrls) {\n  const schema = z.string().url();\n  const testResult = schema.safeParse(links.customerPortalTestUrl);\n  const prodResult = schema.safeParse(links.customerPortalProdUrl);\n  let consoleMsg = {\n    color: '\\x1b[33m%s\\x1b[0m',\n    msg: '',\n  };\n\n  if (testResult.success && prodResult.success) {\n    consoleMsg.color = '\\x1b[32m%s\\x1b[0m';\n    consoleMsg.msg = '✅ Both STRIPE_CUSTOMER_PORTAL_LINK links defined';\n  } else if (!testResult.success && !prodResult.success) {\n    consoleMsg.msg = '⛔️ STRIPE_CUSTOMER_PORTAL_LINK is not defined';\n  } else if (!testResult.success) {\n    consoleMsg.msg = '⛔️ STRIPE_CUSTOMER_PORTAL_LINK is not defined for test env';\n  } else {\n    consoleMsg.msg = '⛔️ STRIPE_CUSTOMER_PORTAL_LINK is not defined for prod env';\n  }\n  console.log(consoleMsg.color, consoleMsg.msg);\n}\n","import { randomUUID } from 'crypto';\nimport { S3Client } from '@aws-sdk/client-s3';\nimport { GetObjectCommand, PutObjectCommand } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\n\nconst s3Client = new S3Client({\n  region: process.env.AWS_S3_REGION,\n  credentials: {\n    accessKeyId: process.env.AWS_S3_IAM_ACCESS_KEY!,\n    secretAccessKey: process.env.AWS_S3_IAM_SECRET_KEY!,\n  },\n});\n\ntype S3Upload = {\n  fileType: string;\n  userInfo: string;\n}\n\nexport const getUploadFileSignedURLFromS3 = async ({fileType, userInfo}: S3Upload) => {\n  const ex = fileType.split('/')[1];\n  const Key = `${userInfo}/${randomUUID()}.${ex}`;\n  const s3Params = {\n    Bucket: process.env.AWS_S3_FILES_BUCKET,\n    Key,\n    ContentType: `${fileType}`,\n  };\n  const command = new PutObjectCommand(s3Params);\n  const uploadUrl = await getSignedUrl(s3Client, command, { expiresIn: 3600,});\n  return { uploadUrl, key: Key };\n}\n\nexport const getDownloadFileSignedURLFromS3 = async ({ key }: { key: string }) => {\n  const s3Params = {\n    Bucket: process.env.AWS_S3_FILES_BUCKET,\n    Key: key,\n  };\n  const command = new GetObjectCommand(s3Params);\n  return await getSignedUrl(s3Client, command, { expiresIn: 3600 });\n}","import { type User, type Task, type File } from 'wasp/entities';\nimport { HttpError } from 'wasp/server';\nimport {\n  type GenerateGptResponse,\n  type StripePayment,\n  type UpdateCurrentUser,\n  type UpdateUserById,\n  type CreateTask,\n  type DeleteTask,\n  type UpdateTask,\n  type CreateFile,\n} from 'wasp/server/operations';\nimport Stripe from 'stripe';\nimport type { GeneratedSchedule, StripePaymentResult } from '../shared/types';\nimport { fetchStripeCustomer, createStripeCheckoutSession } from './payments/stripeUtils.js';\nimport { TierIds } from '../shared/constants.js';\nimport { getUploadFileSignedURLFromS3 } from './file-upload/s3Utils.js';\nimport OpenAI from 'openai';\n\nconst openai = setupOpenAI();\nfunction setupOpenAI() {\n  if (!process.env.OPENAI_API_KEY) {\n    return new HttpError(500, 'OpenAI API key is not set');\n  }\n  return new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n}\n\nexport const stripePayment: StripePayment<string, StripePaymentResult> = async (tier, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n  const userEmail = context.user.email;\n  if (!userEmail) {\n    throw new HttpError(\n      403,\n      'User needs an email to make a payment. If using the usernameAndPassword Auth method, switch to an Auth method that provides an email.'\n    );\n  }\n\n  let priceId;\n  if (tier === TierIds.HOBBY) {\n    priceId = process.env.HOBBY_SUBSCRIPTION_PRICE_ID!;\n  } else if (tier === TierIds.PRO) {\n    priceId = process.env.PRO_SUBSCRIPTION_PRICE_ID!;\n  } else {\n    throw new HttpError(400, 'Invalid tier');\n  }\n\n  let customer: Stripe.Customer;\n  let session: Stripe.Checkout.Session;\n  try {\n    customer = await fetchStripeCustomer(userEmail);\n    session = await createStripeCheckoutSession({\n      priceId,\n      customerId: customer.id,\n    });\n  } catch (error: any) {\n    throw new HttpError(500, error.message);\n  }\n\n  await context.entities.User.update({\n    where: {\n      id: context.user.id,\n    },\n    data: {\n      checkoutSessionId: session.id,\n      stripeId: customer.id,\n    },\n  });\n\n  return {\n    sessionUrl: session.url,\n    sessionId: session.id,\n  };\n};\n\ntype GptPayload = {\n  hours: string;\n};\n\nexport const generateGptResponse: GenerateGptResponse<GptPayload, GeneratedSchedule> = async ({ hours }, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const tasks = await context.entities.Task.findMany({\n    where: {\n      user: {\n        id: context.user.id,\n      },\n    },\n  });\n\n  const parsedTasks = tasks.map(({ description, time }) => ({\n    description,\n    time,\n  }));\n\n  try {\n    if (!context.user.hasPaid && !context.user.credits) {\n      throw new HttpError(402, 'User has not paid or is out of credits');\n    } else if (context.user.credits && !context.user.hasPaid) {\n      console.log('decrementing credits');\n      await context.entities.User.update({\n        where: { id: context.user.id },\n        data: {\n          credits: {\n            decrement: 1,\n          },\n        },\n      });\n    }\n\n    // check if openai is initialized correctly with the API key\n    if (openai instanceof Error) {\n      throw openai;\n    }\n\n    const completion = await openai.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages: [\n        {\n          role: 'system',\n          content:\n            'you are an expert daily planner. you will be given a list of main tasks and an estimated time to complete each task. You will also receive the total amount of hours to be worked that day. Your job is to return a detailed plan of how to achieve those tasks by breaking each task down into at least 3 subtasks each. MAKE SURE TO ALWAYS CREATE AT LEAST 3 SUBTASKS FOR EACH MAIN TASK PROVIDED BY THE USER! YOU WILL BE REWARDED IF YOU DO.',\n        },\n        {\n          role: 'user',\n          content: `I will work ${hours} hours today. Here are the tasks I have to complete: ${JSON.stringify(\n            parsedTasks\n          )}. Please help me plan my day by breaking the tasks down into actionable subtasks with time and priority status.`,\n        },\n      ],\n      tools: [\n        {\n          type: 'function',\n          function: {\n            name: 'parseTodaysSchedule',\n            description: 'parses the days tasks and returns a schedule',\n            parameters: {\n              type: 'object',\n              properties: {\n                mainTasks: {\n                  type: 'array',\n                  description: 'Name of main tasks provided by user, ordered by priority',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      name: {\n                        type: 'string',\n                        description: 'Name of main task provided by user',\n                      },\n                      priority: {\n                        type: 'string',\n                        enum: ['low', 'medium', 'high'],\n                        description: 'task priority',\n                      },\n                    },\n                  },\n                },\n                subtasks: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      description: {\n                        type: 'string',\n                        description:\n                          'detailed breakdown and description of sub-task related to main task. e.g., \"Prepare your learning session by first reading through the documentation\"',\n                      },\n                      time: {\n                        type: 'number',\n                        description: 'time allocated for a given subtask in hours, e.g. 0.5',\n                      },\n                      mainTaskName: {\n                        type: 'string',\n                        description: 'name of main task related to subtask',\n                      },\n                    },\n                  },\n                },\n              },\n              required: ['mainTasks', 'subtasks', 'time', 'priority'],\n            },\n          },\n        },\n      ],\n      tool_choice: {\n        type: 'function',\n        function: {\n          name: 'parseTodaysSchedule',\n        },\n      },\n      temperature: 1,\n    });\n\n    const gptArgs = completion?.choices[0]?.message?.tool_calls?.[0]?.function.arguments;\n\n    if (!gptArgs) {\n      throw new HttpError(500, 'Bad response from OpenAI');\n    }\n\n    console.log('gpt function call arguments: ', gptArgs);\n\n    await context.entities.GptResponse.create({\n      data: {\n        user: { connect: { id: context.user.id } },\n        content: JSON.stringify(gptArgs),\n      },\n    });\n\n    return JSON.parse(gptArgs);\n  } catch (error: any) {\n    if (!context.user.hasPaid && error?.statusCode != 402) {\n      await context.entities.User.update({\n        where: { id: context.user.id },\n        data: {\n          credits: {\n            increment: 1,\n          },\n        },\n      });\n    }\n    console.error(error);\n    const statusCode = error.statusCode || 500;\n    const errorMessage = error.message || 'Internal server error';\n    throw new HttpError(statusCode, errorMessage);\n  }\n};\n\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = async ({ description }, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const task = await context.entities.Task.create({\n    data: {\n      description,\n      user: { connect: { id: context.user.id } },\n    },\n  });\n\n  return task;\n};\n\nexport const updateTask: UpdateTask<Partial<Task>, Task> = async ({ id, isDone, time }, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const task = await context.entities.Task.update({\n    where: {\n      id,\n    },\n    data: {\n      isDone,\n      time,\n    },\n  });\n\n  return task;\n};\n\nexport const deleteTask: DeleteTask<Pick<Task, 'id'>, Task> = async ({ id }, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const task = await context.entities.Task.delete({\n    where: {\n      id,\n    },\n  });\n\n  return task;\n};\n\nexport const updateUserById: UpdateUserById<{ id: number; data: Partial<User> }, User> = async (\n  { id, data },\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  if (!context.user.isAdmin) {\n    throw new HttpError(403);\n  }\n\n  const updatedUser = await context.entities.User.update({\n    where: {\n      id,\n    },\n    data,\n  });\n\n  return updatedUser;\n};\n\ntype fileArgs = {\n  fileType: string;\n  name: string;\n};\n\nexport const createFile: CreateFile<fileArgs, File> = async ({ fileType, name }, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const userInfo = context.user.id.toString();\n\n  const { uploadUrl, key } = await getUploadFileSignedURLFromS3({ fileType, userInfo });\n\n  return await context.entities.File.create({\n    data: {\n      name,\n      key,\n      uploadUrl,\n      type: fileType,\n      user: { connect: { id: context.user.id } },\n    },\n  });\n};\n\nexport const updateCurrentUser: UpdateCurrentUser<Partial<User>, User> = async (user, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  return context.entities.User.update({\n    where: {\n      id: context.user.id,\n    },\n    data: user,\n  });\n};\n","import { prisma } from 'wasp/server'\n\nimport { generateGptResponse } from '../../../../../src/server/actions.js'\n\n\nexport default async function (args, context) {\n  return (generateGptResponse as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      Task: prisma.task,\n      GptResponse: prisma.gptResponse,\n    },\n  })\n}\n\nexport type GenerateGptResponse = typeof generateGptResponse \n","import { createAction } from '../../middleware/operations.js'\nimport generateGptResponse from '../../actions/generateGptResponse.js'\n\nexport default createAction(generateGptResponse)\n","import { prisma } from 'wasp/server'\n\nimport { createTask } from '../../../../../src/server/actions.js'\n\n\nexport default async function (args, context) {\n  return (createTask as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n\nexport type CreateTask = typeof createTask \n","import { createAction } from '../../middleware/operations.js'\nimport createTask from '../../actions/createTask.js'\n\nexport default createAction(createTask)\n","import { prisma } from 'wasp/server'\n\nimport { deleteTask } from '../../../../../src/server/actions.js'\n\n\nexport default async function (args, context) {\n  return (deleteTask as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n\nexport type DeleteTask = typeof deleteTask \n","import { createAction } from '../../middleware/operations.js'\nimport deleteTask from '../../actions/deleteTask.js'\n\nexport default createAction(deleteTask)\n","import { prisma } from 'wasp/server'\n\nimport { updateTask } from '../../../../../src/server/actions.js'\n\n\nexport default async function (args, context) {\n  return (updateTask as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n\nexport type UpdateTask = typeof updateTask \n","import { createAction } from '../../middleware/operations.js'\nimport updateTask from '../../actions/updateTask.js'\n\nexport default createAction(updateTask)\n","import { prisma } from 'wasp/server'\n\nimport { stripePayment } from '../../../../../src/server/actions.js'\n\n\nexport default async function (args, context) {\n  return (stripePayment as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n\nexport type StripePayment = typeof stripePayment \n","import { createAction } from '../../middleware/operations.js'\nimport stripePayment from '../../actions/stripePayment.js'\n\nexport default createAction(stripePayment)\n","import { prisma } from 'wasp/server'\n\nimport { updateCurrentUser } from '../../../../../src/server/actions.js'\n\n\nexport default async function (args, context) {\n  return (updateCurrentUser as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n\nexport type UpdateCurrentUser = typeof updateCurrentUser \n","import { createAction } from '../../middleware/operations.js'\nimport updateCurrentUser from '../../actions/updateCurrentUser.js'\n\nexport default createAction(updateCurrentUser)\n","import { prisma } from 'wasp/server'\n\nimport { updateUserById } from '../../../../../src/server/actions.js'\n\n\nexport default async function (args, context) {\n  return (updateUserById as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n\nexport type UpdateUserById = typeof updateUserById \n","import { createAction } from '../../middleware/operations.js'\nimport updateUserById from '../../actions/updateUserById.js'\n\nexport default createAction(updateUserById)\n","import { prisma } from 'wasp/server'\n\nimport { createFile } from '../../../../../src/server/actions.js'\n\n\nexport default async function (args, context) {\n  return (createFile as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      File: prisma.file,\n    },\n  })\n}\n\nexport type CreateFile = typeof createFile \n","import { createAction } from '../../middleware/operations.js'\nimport createFile from '../../actions/createFile.js'\n\nexport default createAction(createFile)\n","import { type DailyStats, type GptResponse, type User, type PageViewSource, type Task, type File } from 'wasp/entities';\nimport { HttpError } from 'wasp/server';\nimport {\n  type GetGptResponses,\n  type GetDailyStats,\n  type GetPaginatedUsers,\n  type GetAllTasksByUser,\n  type GetAllFilesByUser,\n  type GetDownloadFileSignedURL,\n} from 'wasp/server/operations';\nimport { getDownloadFileSignedURLFromS3 } from './file-upload/s3Utils.js';\n\ntype DailyStatsWithSources = DailyStats & {\n  sources: PageViewSource[];\n};\n\ntype DailyStatsValues = {\n  dailyStats: DailyStatsWithSources;\n  weeklyStats: DailyStatsWithSources[];\n};\n\nexport const getGptResponses: GetGptResponses<void, GptResponse[]> = async (args, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n  return context.entities.GptResponse.findMany({\n    where: {\n      user: {\n        id: context.user.id,\n      },\n    },\n  });\n};\n\nexport const getAllTasksByUser: GetAllTasksByUser<void, Task[]> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n  return context.entities.Task.findMany({\n    where: {\n      user: {\n        id: context.user.id,\n      },\n    },\n    orderBy: {\n      createdAt: 'desc',\n    },\n  });\n};\n\nexport const getAllFilesByUser: GetAllFilesByUser<void, File[]> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n  return context.entities.File.findMany({\n    where: {\n      user: {\n        id: context.user.id,\n      },\n    },\n    orderBy: {\n      createdAt: 'desc',\n    },\n  });\n};\n\nexport const getDownloadFileSignedURL: GetDownloadFileSignedURL<{ key: string }, string> = async (\n  { key },\n  _context\n) => {\n  return await getDownloadFileSignedURLFromS3({ key });\n};\n\nexport const getDailyStats: GetDailyStats<void, DailyStatsValues> = async (_args, context) => {\n  if (!context.user?.isAdmin) {\n    throw new HttpError(401);\n  }\n  const dailyStats = await context.entities.DailyStats.findFirstOrThrow({\n    orderBy: {\n      date: 'desc',\n    },\n    include: {\n      sources: true,\n    },\n  });\n\n  const weeklyStats = await context.entities.DailyStats.findMany({\n    orderBy: {\n      date: 'desc',\n    },\n    take: 7,\n    include: {\n      sources: true,\n    },\n  });\n\n  return { dailyStats, weeklyStats };\n};\n\ntype GetPaginatedUsersInput = {\n  skip: number;\n  cursor?: number | undefined;\n  hasPaidFilter: boolean | undefined;\n  emailContains?: string;\n  subscriptionStatus?: string[];\n};\ntype GetPaginatedUsersOutput = {\n  users: Pick<\n    User,\n    'id' | 'email' | 'username' | 'lastActiveTimestamp' | 'hasPaid' | 'subscriptionStatus' | 'stripeId'\n  >[];\n  totalPages: number;\n};\n\nexport const getPaginatedUsers: GetPaginatedUsers<GetPaginatedUsersInput, GetPaginatedUsersOutput> = async (\n  args,\n  context\n) => {\n  let subscriptionStatus = args.subscriptionStatus?.filter((status) => status !== 'hasPaid');\n  subscriptionStatus = subscriptionStatus?.length ? subscriptionStatus : undefined;\n\n  const queryResults = await context.entities.User.findMany({\n    skip: args.skip,\n    take: 10,\n    where: {\n      email: {\n        contains: args.emailContains || undefined,\n        mode: 'insensitive',\n      },\n      hasPaid: args.hasPaidFilter,\n      subscriptionStatus: {\n        in: subscriptionStatus || undefined,\n      },\n    },\n    select: {\n      id: true,\n      email: true,\n      username: true,\n      lastActiveTimestamp: true,\n      hasPaid: true,\n      subscriptionStatus: true,\n      stripeId: true,\n    },\n    orderBy: {\n      id: 'desc',\n    },\n  });\n\n  const totalUserCount = await context.entities.User.count({\n    where: {\n      email: {\n        contains: args.emailContains || undefined,\n      },\n      hasPaid: args.hasPaidFilter,\n      subscriptionStatus: {\n        in: subscriptionStatus || undefined,\n      },\n    },\n  });\n  const totalPages = Math.ceil(totalUserCount / 10);\n\n  return {\n    users: queryResults,\n    totalPages,\n  };\n};\n","import { prisma } from 'wasp/server'\n\nimport { getGptResponses } from '../../../../../src/server/queries.js'\n\n\nexport default async function (args, context) {\n  return (getGptResponses as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      GptResponse: prisma.gptResponse,\n    },\n  })\n}\n\nexport type GetGptResponses = typeof getGptResponses \n","import { createQuery } from '../../middleware/operations.js'\nimport getGptResponses from '../../queries/getGptResponses.js'\n\nexport default createQuery(getGptResponses)\n","import { prisma } from 'wasp/server'\n\nimport { getAllTasksByUser } from '../../../../../src/server/queries.js'\n\n\nexport default async function (args, context) {\n  return (getAllTasksByUser as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n\nexport type GetAllTasksByUser = typeof getAllTasksByUser \n","import { createQuery } from '../../middleware/operations.js'\nimport getAllTasksByUser from '../../queries/getAllTasksByUser.js'\n\nexport default createQuery(getAllTasksByUser)\n","import { prisma } from 'wasp/server'\n\nimport { getAllFilesByUser } from '../../../../../src/server/queries.js'\n\n\nexport default async function (args, context) {\n  return (getAllFilesByUser as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      File: prisma.file,\n    },\n  })\n}\n\nexport type GetAllFilesByUser = typeof getAllFilesByUser \n","import { createQuery } from '../../middleware/operations.js'\nimport getAllFilesByUser from '../../queries/getAllFilesByUser.js'\n\nexport default createQuery(getAllFilesByUser)\n","import { prisma } from 'wasp/server'\n\nimport { getDownloadFileSignedURL } from '../../../../../src/server/queries.js'\n\n\nexport default async function (args, context) {\n  return (getDownloadFileSignedURL as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      File: prisma.file,\n    },\n  })\n}\n\nexport type GetDownloadFileSignedURL = typeof getDownloadFileSignedURL \n","import { createQuery } from '../../middleware/operations.js'\nimport getDownloadFileSignedURL from '../../queries/getDownloadFileSignedURL.js'\n\nexport default createQuery(getDownloadFileSignedURL)\n","import { prisma } from 'wasp/server'\n\nimport { getDailyStats } from '../../../../../src/server/queries.js'\n\n\nexport default async function (args, context) {\n  return (getDailyStats as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      DailyStats: prisma.dailyStats,\n    },\n  })\n}\n\nexport type GetDailyStats = typeof getDailyStats \n","import { createQuery } from '../../middleware/operations.js'\nimport getDailyStats from '../../queries/getDailyStats.js'\n\nexport default createQuery(getDailyStats)\n","import { prisma } from 'wasp/server'\n\nimport { getPaginatedUsers } from '../../../../../src/server/queries.js'\n\n\nexport default async function (args, context) {\n  return (getPaginatedUsers as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n\nexport type GetPaginatedUsers = typeof getPaginatedUsers \n","import { createQuery } from '../../middleware/operations.js'\nimport getPaginatedUsers from '../../queries/getPaginatedUsers.js'\n\nexport default createQuery(getPaginatedUsers)\n","import express from 'express'\n\nimport auth from 'wasp/core/auth'\n\nimport generateGptResponse from './generateGptResponse.js'\nimport createTask from './createTask.js'\nimport deleteTask from './deleteTask.js'\nimport updateTask from './updateTask.js'\nimport stripePayment from './stripePayment.js'\nimport updateCurrentUser from './updateCurrentUser.js'\nimport updateUserById from './updateUserById.js'\nimport createFile from './createFile.js'\nimport getGptResponses from './getGptResponses.js'\nimport getAllTasksByUser from './getAllTasksByUser.js'\nimport getAllFilesByUser from './getAllFilesByUser.js'\nimport getDownloadFileSignedURL from './getDownloadFileSignedURL.js'\nimport getDailyStats from './getDailyStats.js'\nimport getPaginatedUsers from './getPaginatedUsers.js'\n\nconst router = express.Router()\n\nrouter.post('/generate-gpt-response', auth, generateGptResponse)\nrouter.post('/create-task', auth, createTask)\nrouter.post('/delete-task', auth, deleteTask)\nrouter.post('/update-task', auth, updateTask)\nrouter.post('/stripe-payment', auth, stripePayment)\nrouter.post('/update-current-user', auth, updateCurrentUser)\nrouter.post('/update-user-by-id', auth, updateUserById)\nrouter.post('/create-file', auth, createFile)\nrouter.post('/get-gpt-responses', auth, getGptResponses)\nrouter.post('/get-all-tasks-by-user', auth, getAllTasksByUser)\nrouter.post('/get-all-files-by-user', auth, getAllFilesByUser)\nrouter.post('/get-download-file-signed-url', auth, getDownloadFileSignedURL)\nrouter.post('/get-daily-stats', auth, getDailyStats)\nrouter.post('/get-paginated-users', auth, getPaginatedUsers)\n\nexport default router\n","import express from 'express'\nimport cookieParser from 'cookie-parser'\nimport logger from 'morgan'\nimport cors from 'cors'\nimport helmet from 'helmet'\n\nimport { config } from 'wasp/server'\nimport type { MiddlewareConfig, MiddlewareConfigFn } from 'wasp/server/middleware'\nexport type { MiddlewareConfig, MiddlewareConfigFn } from 'wasp/server/middleware'\n\nconst _waspGlobalMiddlewareConfigFn = (mc: MiddlewareConfig) => mc\n\n// This is the set of middleware Wasp supplies by default.\n// NOTE: Remember to update the docs of these change.\nconst defaultGlobalMiddlewareConfig: MiddlewareConfig = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n\n// This is the global middleware that is the result of applying the user's modifications.\n// It will be used as the basis for Operations and APIs (unless they are further customized).\nconst globalMiddlewareConfig: MiddlewareConfig = _waspGlobalMiddlewareConfigFn(defaultGlobalMiddlewareConfig)\n\n// This function returns an array of Express middleware to be used by a router. It optionally\n// accepts a function that can modify the global middleware for specific route customization.\nexport function globalMiddlewareConfigForExpress(middlewareConfigFn?: MiddlewareConfigFn): express.RequestHandler[] {\n  if (!middlewareConfigFn) {\n    return Array.from(globalMiddlewareConfig.values())\n  }\n\n  // Make a clone so they can't mess up the global Map for any other routes calling this.\n  const globalMiddlewareConfigClone = new Map(globalMiddlewareConfig)\n  const modifiedMiddlewareConfig = middlewareConfigFn(globalMiddlewareConfigClone)\n  return Array.from(modifiedMiddlewareConfig.values())\n}\n","import { serialize as superjsonSerialize } from 'superjson'\nimport { handleRejection } from 'wasp/server/utils'\nimport { throwInvalidCredentialsError } from 'wasp/auth/utils'\n\nexport default handleRejection(async (req, res) => {\n  if (req.user) {\n    return res.json(superjsonSerialize(req.user))\n  } else {\n    throwInvalidCredentialsError()\n  }\n})\n","import { handleRejection } from 'wasp/server/utils'\nimport { throwInvalidCredentialsError } from 'wasp/auth/utils'\nimport { invalidateSession } from 'wasp/auth/session'\n\nexport default handleRejection(async (req, res) => {\n  if (req.sessionId) {\n    await invalidateSession(req.sessionId)\n    return res.json({ success: true })\n  } else {\n    throwInvalidCredentialsError()\n  }\n})\n","import { throwInvalidCredentialsError } from 'wasp/auth/utils'\nimport { handleRejection } from 'wasp/server/utils'\nimport { verifyPassword } from 'wasp/auth/password'\n\nimport {\n  createProviderId,\n  findAuthIdentity,\n  findAuthWithUserBy,\n  deserializeAndSanitizeProviderData,\n} from 'wasp/auth/utils'\nimport { createSession } from 'wasp/auth/session'\nimport { ensureValidUsername, ensurePasswordIsPresent } from 'wasp/auth/validation'\n\nexport default handleRejection(async (req, res) => {\n  const fields = req.body ?? {}\n  ensureValidArgs(fields)\n\n  const providerId = createProviderId('username', fields.username)\n  const authIdentity = await findAuthIdentity(providerId)\n  if (!authIdentity) {\n    throwInvalidCredentialsError()\n  }\n\n  try {\n    const providerData = deserializeAndSanitizeProviderData<'username'>(authIdentity.providerData)\n\n    await verifyPassword(providerData.hashedPassword, fields.password)\n  } catch(e) {\n    throwInvalidCredentialsError()\n  }\n\n  const auth = await findAuthWithUserBy({\n    id: authIdentity.authId\n  }) \n\n  const session = await createSession(auth.id)\n\n  return res.json({\n      sessionId: session.id,\n  })\n})\n\nfunction ensureValidArgs(args: unknown): void {\n  ensureValidUsername(args);\n  ensurePasswordIsPresent(args);\n}\n","import { handleRejection } from 'wasp/server/utils'\nimport {\n  createProviderId,\n  createUser,\n  rethrowPossibleAuthError,\n  sanitizeAndSerializeProviderData,\n} from 'wasp/auth/utils'\nimport {\n  ensureValidUsername,\n  ensurePasswordIsPresent,\n  ensureValidPassword,\n} from 'wasp/auth/validation'\nimport { validateAndGetUserFields } from 'wasp/auth/utils'\nimport { type UserSignupFields } from 'wasp/auth/providers/types'\n\nexport function getSignupRoute({\n  userSignupFields,\n}: {\n  userSignupFields?: UserSignupFields;\n}) {\n  return handleRejection(async function signup(req, res) {\n    const fields = req.body ?? {}\n    ensureValidArgs(fields)\n  \n    const userFields = await validateAndGetUserFields(\n      fields,\n      userSignupFields,\n    );\n  \n    const providerId = createProviderId('username', fields.username)\n    const providerData = await sanitizeAndSerializeProviderData<'username'>({\n      hashedPassword: fields.password,\n    })\n  \n    try {\n      await createUser(\n        providerId,\n        providerData,\n        // Using any here because we want to avoid TypeScript errors and\n        // rely on Prisma to validate the data.\n        userFields as any\n      )\n    } catch (e: unknown) {\n      rethrowPossibleAuthError(e)\n    }\n  \n    return res.json({ success: true })\n  })\n}\n\nfunction ensureValidArgs(args: unknown): void {\n  ensureValidUsername(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n}\n","import { defineUserSignupFields } from 'wasp/auth/providers/types';\n\nexport const getUsernameAndPasswordUserFields = defineUserSignupFields({\n  username: (data: any) => data.username,\n});\n\nconst adminEmails = process.env.ADMIN_EMAILS?.split(',') || [];\n\nexport const getEmailUserFields = defineUserSignupFields({\n  username: (data: any) => data.email,\n  isAdmin : (data: any) => adminEmails.includes(data.email),\n});\n\nexport const getGitHubUserFields = defineUserSignupFields({\n  // NOTE: if we don't want to access users' emails, we can use scope [\"user:read\"]\n  // instead of [\"user\"] and access args.profile.username instead\n  email: (data: any) => data.profile.emails[0].value,\n  username: (data: any) => data.profile.username,\n  isAdmin: (data: any) => adminEmails.includes(data.profile.emails[0].value),\n});\n\nexport function getGitHubAuthConfig() {\n  return {\n    clientID: process.env.GITHUB_CLIENT_ID, // look up from env or elsewhere\n    clientSecret: process.env.GITHUB_CLIENT_SECRET, // look up from env or elsewhere\n    scope: ['user'],\n  };\n}\n\nexport const getGoogleUserFields = defineUserSignupFields({\n  email: (data: any) => data.profile.emails[0].value,\n  username: (data: any) => data.profile.displayName,\n  isAdmin: (data: any) => adminEmails.includes(data.profile.emails[0].value),\n});\n\nexport function getGoogleAuthConfig() {\n  const clientID = process.env.GOOGLE_CLIENT_ID;\n  const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\n  return {\n    clientID, // look up from env or elsewhere,\n    clientSecret, // look up from env or elsewhere,\n    scope: ['profile', 'email'], // must include at least 'profile' for Google\n  };\n}\n\n","\nimport { Router } from \"express\";\n\nimport login from \"../username/login.js\";\nimport { getSignupRoute } from \"../username/signup.js\";\nimport { ProviderConfig } from \"wasp/auth/providers/types\";\n\nimport { getUsernameAndPasswordUserFields } from '../../../../../../../src/server/auth/setUsername.js'\nconst _waspUserSignupFields = getUsernameAndPasswordUserFields\n\nconst config: ProviderConfig = {\n    id: \"username\",\n    displayName: \"Username and password\",\n    createRouter() {\n        const router = Router();\n\n        router.post('/login', login);\n        const signupRoute = getSignupRoute({\n            userSignupFields: _waspUserSignupFields,\n        });\n        router.post('/signup', signupRoute);\n\n        return router;\n    },\n}\n\nexport default config;\n","import { Router } from \"express\";\n\nimport username from './config/username.js'\n\nconst providers = [\n  username,\n];\n\nconst router = Router();\n\nfor (const provider of providers) {\n  const { init, createRouter } = provider;\n  const initData = init\n    ? await init(provider)\n    : undefined;\n  const providerRouter = createRouter(provider, initData);\n  router.use(`/${provider.id}`, providerRouter);\n  console.log(`🚀 \"${provider.displayName}\" auth initialized`)\n}\n\nexport default router;\n","import express from 'express'\n\nimport auth from 'wasp/core/auth'\nimport me from './me.js'\nimport logout from './logout.js'\n\nimport providersRouter from '../../auth/providers/index.js'\n\nconst router = express.Router()\n\nrouter.get('/me', auth, me)\nrouter.post('/logout', auth, logout)\nrouter.use('/', providersRouter)\n\nexport default router\n","import { emailSender } from 'wasp/server/email';\nimport { type MiddlewareConfigFn } from 'wasp/server';\nimport { type StripeWebhook } from 'wasp/server/api';\nimport express from 'express';\nimport { TierIds } from '../../shared/constants.js';\n\nimport Stripe from 'stripe';\n\n// make sure the api version matches the version in the Stripe dashboard\nconst stripe = new Stripe(process.env.STRIPE_KEY!, {\n  apiVersion: '2022-11-15', // TODO find out where this is in the Stripe dashboard and document\n});\n\nexport const stripeWebhook: StripeWebhook = async (request, response, context) => {\n  const sig = request.headers['stripe-signature'] as string;\n  let event: Stripe.Event;\n\n  try {\n    event = stripe.webhooks.constructEvent(request.body, sig, process.env.STRIPE_WEBHOOK_SECRET!);\n    // console.table({sig: 'stripe webhook signature verified', type: event.type})\n  } catch (err: any) {\n    console.log(err.message);\n    return response.status(400).send(`Webhook Error: ${err.message}`);\n  }\n\n  // let event: Stripe.Event;\n  let userStripeId: string | null = null;\n\n  try {\n    if (event.type === 'checkout.session.completed') {\n      console.log('Checkout session completed');\n      const session = event.data.object as Stripe.Checkout.Session;\n      userStripeId = session.customer as string;\n\n      const { line_items } = await stripe.checkout.sessions.retrieve(session.id, {\n        expand: ['line_items'],\n      });\n\n      if (line_items?.data[0]?.price?.id === process.env.HOBBY_SUBSCRIPTION_PRICE_ID) {\n        console.log('Hobby subscription purchased ');\n        await context.entities.User.updateMany({\n          where: {\n            stripeId: userStripeId,\n          },\n          data: {\n            hasPaid: true,\n            datePaid: new Date(),\n            subscriptionTier: TierIds.HOBBY,\n          },\n        });\n      } else if (line_items?.data[0]?.price?.id === process.env.PRO_SUBSCRIPTION_PRICE_ID) {\n        console.log('Pro subscription purchased ');\n        await context.entities.User.updateMany({\n          where: {\n            stripeId: userStripeId,\n          },\n          data: {\n            hasPaid: true,\n            datePaid: new Date(),\n            subscriptionTier: TierIds.PRO,\n          },\n        });\n      }\n\n      /**\n       * and here is an example of handling a product that is not a subscription\n       * in this case, we are adding 10 credits to the user's account\n       * make sure to configure it in the Stripe dashboard first!\n       */\n\n      // if (line_items?.data[0]?.price?.id === process.env.CREDITS_PRICE_ID) {\n      //   console.log('Credits purchased: ');\n      //   await context.entities.User.updateMany({\n      //     where: {\n      //       stripeId: userStripeId,\n      //     },\n      //     data: {\n      //       credits: {\n      //         increment: 10,\n      //       },\n      //     },\n      //   });\n      // }\n    } else if (event.type === 'invoice.paid') {\n      const invoice = event.data.object as Stripe.Invoice;\n      const periodStart = new Date(invoice.period_start * 1000);\n      await context.entities.User.updateMany({\n        where: {\n          stripeId: userStripeId,\n        },\n        data: {\n          hasPaid: true,\n          datePaid: periodStart,\n        },\n      });\n    } else if (event.type === 'customer.subscription.updated') {\n      const subscription = event.data.object as Stripe.Subscription;\n      userStripeId = subscription.customer as string;\n      if (subscription.status === 'active') {\n        console.log('Subscription active ', userStripeId);\n        await context.entities.User.updateMany({\n          where: {\n            stripeId: userStripeId,\n          },\n          data: {\n            subscriptionStatus: 'active',\n          },\n        });\n      }\n      // you'll want to make a check on the front end to see if the subscription is past due\n      // and then prompt the user to update their payment method\n      // this is useful if the user's card expires or is canceled and automatic subscription renewal fails\n      if (subscription.status === 'past_due') {\n        console.log('Subscription past due: ', userStripeId);\n        await context.entities.User.updateMany({\n          where: {\n            stripeId: userStripeId,\n          },\n          data: {\n            subscriptionStatus: 'past_due',\n          },\n        });\n      }\n      /**\n       * Stripe will send a subscription.updated event when a subscription is canceled\n       * but the subscription is still active until the end of the period.\n       * So we check if cancel_at_period_end is true and send an email to the customer.\n       * https://stripe.com/docs/billing/subscriptions/cancel#events\n       */\n      if (subscription.cancel_at_period_end) {\n        console.log('Subscription canceled at period end');\n\n        let customer = await context.entities.User.findFirst({\n          where: {\n            stripeId: userStripeId,\n          },\n          select: {\n            id: true,\n            email: true,\n          },\n        });\n\n        if (customer) {\n          await context.entities.User.update({\n            where: {\n              id: customer.id,\n            },\n            data: {\n              subscriptionStatus: 'canceled',\n            },\n          });\n\n          if (customer.email) {\n            await emailSender.send({\n              to: customer.email,\n              subject: 'We hate to see you go :(',\n              text: 'We hate to see you go. Here is a sweet offer...',\n              html: 'We hate to see you go. Here is a sweet offer...',\n            });\n          }\n        }\n      }\n    } else if (event.type === 'customer.subscription.deleted') {\n      const subscription = event.data.object as Stripe.Subscription;\n      userStripeId = subscription.customer as string;\n\n      /**\n       * Stripe will send then finally send a subscription.deleted event when subscription period ends\n       * https://stripe.com/docs/billing/subscriptions/cancel#events\n       */\n      console.log('Subscription deleted/ended');\n      await context.entities.User.updateMany({\n        where: {\n          stripeId: userStripeId,\n        },\n        data: {\n          hasPaid: false,\n          subscriptionStatus: 'deleted',\n        },\n      });\n    } else {\n      console.log(`Unhandled event type ${event.type}`);\n    }\n\n    response.json({ received: true });\n  } catch (err: any) {\n    response.status(400).send(`Webhook Error: ${err?.message}`);\n  }\n};\n\n// This allows us to override Wasp's defaults and parse the raw body of the request from Stripe to verify the signature\nexport const stripeMiddlewareFn: MiddlewareConfigFn = (middlewareConfig) => {\n  middlewareConfig.delete('express.json');\n  middlewareConfig.set('express.raw', express.raw({ type: 'application/json' }));\n  return middlewareConfig;\n};\n","import express from 'express'\nimport { prisma } from 'wasp/server'\nimport { handleRejection } from 'wasp/server/utils'\nimport { MiddlewareConfigFn, globalMiddlewareConfigForExpress } from '../../middleware/index.js'\nimport auth from 'wasp/core/auth'\nimport { type AuthUser } from 'wasp/auth'\n\n\nimport { stripeWebhook as _waspstripeWebhookfn } from '../../../../../../src/server/webhooks/stripe.js'\nimport { stripeMiddlewareFn as _waspstripeWebhookmiddlewareConfigFn } from '../../../../../../src/server/webhooks/stripe.js'\n\nconst idFn: MiddlewareConfigFn = x => x\n\n\nconst router = express.Router()\n\n\nconst stripeWebhookMiddleware = globalMiddlewareConfigForExpress(_waspstripeWebhookmiddlewareConfigFn)\nrouter.post(\n  '/stripe-webhook',\n  [auth, ...stripeWebhookMiddleware],\n  handleRejection(\n    (\n      req: Parameters<typeof _waspstripeWebhookfn>[0] & { user: AuthUser },\n      res: Parameters<typeof _waspstripeWebhookfn>[1],\n    ) => {\n      const context = {\n        user: req.user,\n        entities: {\n          User: prisma.user,\n        },\n      }\n      return _waspstripeWebhookfn(req, res, context)\n    }\n  )\n)\n\nexport default router\n","import express from 'express'\nimport operations from './operations/index.js'\nimport { globalMiddlewareConfigForExpress } from '../middleware/index.js'\nimport auth from './auth/index.js'\nimport apis from './apis/index.js'\n\n\nconst router = express.Router()\nconst middleware = globalMiddlewareConfigForExpress()\n\nrouter.get('/', middleware, function (_req, res, _next) {\n  res.json('Hello world')\n})\n\nrouter.use('/auth', middleware, auth)\nrouter.use('/operations', middleware, operations)\n// NOTE: Keep user-defined api routes last so they cannot override our routes.\n// Additionally, do not add middleware to these routes here. Instead, we add\n// it later to allow for middleware customization.\nrouter.use(apis)\n\nexport default router\n","import express from 'express'\n\nimport { HttpError } from 'wasp/server'\nimport indexRouter from './routes/index.js'\n\n// TODO: Consider extracting most of this logic into createApp(routes, path) function so that\n//   it can be used in unit tests to test each route individually.\n\nconst app = express()\n\n// NOTE: Middleware are installed on a per-router or per-route basis.\n\napp.use('/', indexRouter)\n\n// Custom error handler.\napp.use((err, _req, res, next) => {\n  // As by expressjs documentation, when the headers have already\n  // been sent to the client, we must delegate to the default error handler.\n  if (res.headersSent) { return next(err) }\n\n  if (err instanceof HttpError) {\n    return res.status(err.statusCode).json({ message: err.message, data: err.data })\n  }\n\n  // This forwards the error to the default express error handler.\n  // As described by expressjs documentation, the default error handler sets response status\n  // to err.status or err.statusCode if it is 4xx or 5xx, and if not, sets it to 500.\n  // It won't add any more info to it if server is running in production, which is exactly what we want,\n  // we want to share as little info as possible when error happens in production, for security reasons,\n  // so they will get only status code if set, or 500 if not, no extra info.\n  // In development it will also share the error stack though, which is useful.\n  // If the user wants to put more information about the error into the response, they should use HttpError.\n  return next(err)\n})\n\nexport default app\n","import { type EmailChecker } from 'wasp/server/jobs';\n\nimport { type User } from 'wasp/entities';\nimport { emailSender } from 'wasp/server/email';\nimport { type Email } from 'wasp/server/email/core/types'; // TODO fix after it gets fixed in wasp :)\n\nconst emailToSend: Email = {\n  to: '',\n  subject: 'The SaaS App Newsletter',\n  text: 'Hey There! \\n\\nThis is just a newsletter that sends automatically via cron jobs',\n  html: `<html lang=\"en\">\n          <head>\n            <meta charset=\"UTF-8\">\n            <title>SaaS App Newsletter</title>\n          </head>\n          <body>\n            <p>Hey There!</p>\n            \n            <p>This is just a newsletter that sends automatically via cron jobs</p>\n          </body>\n        </html>`,\n};\n\n//  you could use this function to send newsletters, expiration notices, etc.\nexport const checkAndQueueEmails: EmailChecker<never, void> = async (_args, context) => {\n  // e.g. you could send an offer email 2 weeks before their subscription expires\n  const currentDate = new Date();\n  const twoWeeksFromNow = new Date(currentDate.getTime() + 14 * 24 * 60 * 60 * 1000);\n\n  const users = (await context.entities.User.findMany({\n    where: {\n      datePaid: {\n        equals: twoWeeksFromNow,\n      },\n      sendEmail: true,\n    },\n  })) as User[];\n\n  if (users.length === 0) {\n    return;\n  }\n  await Promise.allSettled(\n    users.map(async (user) => {\n      if (user.email) {\n        try {\n          emailToSend.to = user.email;\n          await emailSender.send(emailToSend);\n        } catch (error) {\n          console.error('Error sending notice to user: ', user.id, error);\n        }\n      }\n    })\n  );\n};\n","import { registerJob } from 'wasp/server/jobs/core/pgBoss'\nimport { checkAndQueueEmails } from '../../../../../src/server/workers/checkAndQueueEmails.js'\nimport { emailChecker as _waspJobDefinition } from 'wasp/server/jobs'\n\nregisterJob({\n  job: _waspJobDefinition,\n  jobFn: checkAndQueueEmails,\n})\n","const PLAUSIBLE_API_KEY = process.env.PLAUSIBLE_API_KEY!;\nconst PLAUSIBLE_SITE_ID = process.env.PLAUSIBLE_SITE_ID!;\nconst PLAUSIBLE_BASE_URL = process.env.PLAUSIBLE_BASE_URL;\n\nconst headers = {\n  'Content-Type': 'application/json',\n  Authorization: `Bearer ${PLAUSIBLE_API_KEY}`,\n};\n\ntype PageViewsResult = {\n  results: {\n    [key: string]: {\n      value: number;\n    };\n  };\n};\n\ntype PageViewSourcesResult = {\n  results: [\n    {\n      source: string;\n      visitors: number;\n    }\n  ];\n};\n\nexport async function getDailyPageViews() {\n  const totalViews = await getTotalPageViews();\n  const prevDayViewsChangePercent = await getPrevDayViewsChangePercent();\n\n  return {\n    totalViews,\n    prevDayViewsChangePercent,\n  };\n}\n\nasync function getTotalPageViews() {\n  const response = await fetch(\n    `${PLAUSIBLE_BASE_URL}/v1/stats/aggregate?site_id=${PLAUSIBLE_SITE_ID}&metrics=pageviews`,\n    {\n      method: 'GET',\n      headers: headers,\n    }\n  );\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n  const json = (await response.json()) as PageViewsResult;\n\n  return json.results.pageviews.value;\n}\n\nasync function getPrevDayViewsChangePercent() {\n  // Calculate today, yesterday, and the day before yesterday's dates\n  const today = new Date();\n  const yesterday = new Date(today.setDate(today.getDate() - 1)).toISOString().split('T')[0];\n  const dayBeforeYesterday = new Date(new Date().setDate(new Date().getDate() - 2)).toISOString().split('T')[0];\n\n  // Fetch page views for yesterday and the day before yesterday\n  const pageViewsYesterday = await getPageviewsForDate(yesterday);\n  const pageViewsDayBeforeYesterday = await getPageviewsForDate(dayBeforeYesterday);\n\n  console.table({\n    pageViewsYesterday,\n    pageViewsDayBeforeYesterday,\n    typeY: typeof pageViewsYesterday,\n    typeDBY: typeof pageViewsDayBeforeYesterday,\n  });\n\n  let change = 0;\n  if (pageViewsYesterday === 0 || pageViewsDayBeforeYesterday === 0) {\n    return '0';\n  } else {\n    change = ((pageViewsYesterday - pageViewsDayBeforeYesterday) / pageViewsDayBeforeYesterday) * 100;\n  }\n  return change.toFixed(0);\n}\n\nasync function getPageviewsForDate(date: string) {\n  const url = `${PLAUSIBLE_BASE_URL}/v1/stats/aggregate?site_id=${PLAUSIBLE_SITE_ID}&period=day&date=${date}&metrics=pageviews`;\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: headers,\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n  const data = (await response.json()) as PageViewsResult;\n  return data.results.pageviews.value;\n}\n\nexport async function getSources() {\n  const url = `${PLAUSIBLE_BASE_URL}/v1/stats/breakdown?site_id=${PLAUSIBLE_SITE_ID}&property=visit:source&metrics=visitors`;\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: headers,\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n  const data = (await response.json()) as PageViewSourcesResult;\n  return data.results;\n}\n","import { type DailyStatsJob } from 'wasp/server/jobs';\nimport Stripe from 'stripe';\nimport { getDailyPageViews, getSources } from './plausibleAnalyticsUtils.js';\n// import { getDailyPageViews, getSources } from './googleAnalyticsUtils.js';\n\nconst stripe = new Stripe(process.env.STRIPE_KEY!, {\n  apiVersion: '2022-11-15', // TODO find out where this is in the Stripe dashboard and document\n});\n\nexport const calculateDailyStats: DailyStatsJob<never, void> = async (_args, context) => {\n  const nowUTC = new Date(Date.now());\n  nowUTC.setUTCHours(0, 0, 0, 0);\n\n  const yesterdayUTC = new Date(nowUTC);\n  yesterdayUTC.setUTCDate(yesterdayUTC.getUTCDate() - 1);\n\n  try {\n    const yesterdaysStats = await context.entities.DailyStats.findFirst({\n      where: {\n        date: {\n          equals: yesterdayUTC,\n        },\n      },\n    });\n\n    const userCount = await context.entities.User.count({});\n    // users can have paid but canceled subscriptions which terminate at the end of the period\n    // we don't want to count those users as current paying users\n    const paidUserCount = await context.entities.User.count({\n      where: {\n        hasPaid: true,\n        subscriptionStatus: 'active',\n      },\n    });\n\n    let userDelta = userCount;\n    let paidUserDelta = paidUserCount;\n    if (yesterdaysStats) {\n      userDelta -= yesterdaysStats.userCount;\n      paidUserDelta -= yesterdaysStats.paidUserCount;\n    }\n\n    const totalRevenue = await fetchTotalStripeRevenue();\n    const { totalViews, prevDayViewsChangePercent } = await getDailyPageViews();\n\n    let dailyStats = await context.entities.DailyStats.findUnique({\n      where: {\n        date: nowUTC,\n      },\n    });\n\n    if (!dailyStats) {\n      console.log('No daily stat found for today, creating one...');\n      dailyStats = await context.entities.DailyStats.create({\n        data: {\n          date: nowUTC,\n          totalViews,\n          prevDayViewsChangePercent,\n          userCount,\n          paidUserCount,\n          userDelta,\n          paidUserDelta,\n          totalRevenue,\n        },\n      });\n    } else {\n      console.log('Daily stat found for today, updating it...');\n      dailyStats = await context.entities.DailyStats.update({\n        where: {\n          id: dailyStats.id,\n        },\n        data: {\n          totalViews,\n          prevDayViewsChangePercent,\n          userCount,\n          paidUserCount,\n          userDelta,\n          paidUserDelta,\n          totalRevenue,\n        },\n      });\n    }\n    const sources = await getSources();\n\n    for (const source of sources) {\n      let visitors = source.visitors;\n      if (typeof source.visitors !== 'number') {\n        visitors = parseInt(source.visitors);\n      }\n      await context.entities.PageViewSource.upsert({\n        where: {\n          date_name: {\n            date: nowUTC,\n            name: source.source,\n          },\n        },\n        create: {\n          date: nowUTC,\n          name: source.source,\n          visitors,\n          dailyStatsId: dailyStats.id,\n        },\n        update: {\n          visitors,\n        },\n      });\n    }\n\n    console.table({ dailyStats });\n  } catch (error: any) {\n    console.error('Error calculating daily stats: ', error);\n    await context.entities.Logs.create({\n      data: {\n        message: `Error calculating daily stats: ${error?.message}`,\n        level: 'job-error',\n      },\n    });\n  }\n};\n\nasync function fetchTotalStripeRevenue() {\n  let totalRevenue = 0;\n  let params: Stripe.BalanceTransactionListParams = {\n    limit: 100,\n    // created: {\n    //   gte: startTimestamp,\n    //   lt: endTimestamp\n    // },\n    type: 'charge',\n  };\n\n  let hasMore = true;\n  while (hasMore) {\n    const balanceTransactions = await stripe.balanceTransactions.list(params);\n\n    for (const transaction of balanceTransactions.data) {\n      if (transaction.type === 'charge') {\n        totalRevenue += transaction.amount;\n      }\n    }\n\n    if (balanceTransactions.has_more) {\n      // Set the starting point for the next iteration to the last object fetched\n      params.starting_after = balanceTransactions.data[balanceTransactions.data.length - 1].id;\n    } else {\n      hasMore = false;\n    }\n  }\n\n  // Revenue is in cents so we convert to dollars (or your main currency unit)\n  const formattedRevenue = totalRevenue / 100;\n  return formattedRevenue;\n}\n","import { registerJob } from 'wasp/server/jobs/core/pgBoss'\nimport { calculateDailyStats } from '../../../../../src/server/workers/calculateDailyStats.js'\nimport { dailyStatsJob as _waspJobDefinition } from 'wasp/server/jobs'\n\nregisterJob({\n  job: _waspJobDefinition,\n  jobFn: calculateDailyStats,\n})\n","// This is a polyfill for Node.js 18 webcrypto API so Lucia can use it\n// for random number generation.\n\nimport { webcrypto } from \"node:crypto\";\n\n// NOTE: node < 19 doesn't have Crypto API, which we need for Lucia, so we apply the polyfill if Crypto API is not defined.\nif (typeof globalThis.crypto === \"undefined\") {\n  // @ts-ignore\n  globalThis.crypto = webcrypto as Crypto;\n}\n\n","import http from 'http'\n\nimport app from './app.js'\nimport { config } from 'wasp/server'\n\n\nimport { startPgBoss } from 'wasp/server/jobs/core/pgBoss'\nimport './jobs/core/allJobs.js'\n\n\nimport './polyfill.js'\n\nconst startServer = async () => {\n  await startPgBoss()\n\n  const port = normalizePort(config.port)\n  app.set('port', port)\n\n  const server = http.createServer(app)\n\n\n\n  server.listen(port)\n\n  server.on('error', (error: NodeJS.ErrnoException) => {\n    if (error.syscall !== 'listen') throw error\n    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges')\n      process.exit(1)\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use')\n      process.exit(1)\n    default:\n      throw error\n    }\n  })\n\n  server.on('listening', () => {\n    const addr = server.address()\n    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port\n    console.log('Server listening on ' + bind)\n  })\n}\n\nstartServer().catch(e => console.error(e))\n\n/**\n * Normalize a port into a number, string, or false.\n */\nfunction normalizePort (val) {\n  const port = parseInt(val, 10)\n  if (isNaN(port)) return val // named pipe\n  if (port >= 0) return port // port number\n  return false\n}\n"],"names":["superjsonDeserialize","superjsonSerialize","stripe","TierIds","stripePayment","generateGptResponse","createTask","updateTask","deleteTask","updateUserById","createFile","updateCurrentUser","getGptResponses","getAllTasksByUser","getAllFilesByUser","getDownloadFileSignedURL","getDailyStats","getPaginatedUsers","router","config","ensureValidArgs","username","providersRouter","_waspstripeWebhookmiddlewareConfigFn","_waspstripeWebhookfn","auth","operations","apis","indexRouter","_waspJobDefinition"],"mappings":"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"}